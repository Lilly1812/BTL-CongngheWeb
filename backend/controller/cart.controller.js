import Cart from "../model/cart.model.js";
import mongoose from "mongoose";

export const getCartByUserId = async (req, res) => {
  try {
    const user = req.user;

    // N·∫øu l√† customer, ch·ªâ cho truy c·∫≠p gi·ªè h√†ng c·ªßa ch√≠nh m√¨nh
    const cart = await Cart.findOne({
      user: user.role === 'customer' ? user._id : req.query.userId || user._id,
    }).populate("items.product");

    if (!cart) {
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng." });
    }

    res.status(200).json({ success: true, data: cart });
  } catch (error) {
    console.error("‚ùå Error in getCartByUserId:", error.message);
    res.status(500).json({ success: false, message: "L·ªói server." });
  }
};
export const addToCart = async (req, res) => {
  const { productId, quantity } = req.body;
  const userId = req.user._id; // ‚úÖ L·∫•y t·ª´ token ƒë√£ decode

  try {
    let cart = await Cart.findOne({ user: userId });

    if (!cart) {
      // N·∫øu ch∆∞a c√≥ gi·ªè h√†ng th√¨ t·∫°o m·ªõi
      cart = new Cart({ user: userId, items: [] });
    }

    const itemIndex = cart.items.findIndex(item => item.product.toString() === productId);

    if (itemIndex >= 0) {
      // N·∫øu ƒë√£ c√≥ s·∫£n ph·∫©m ƒë√≥ th√¨ tƒÉng s·ªë l∆∞·ª£ng
      cart.items[itemIndex].quantity += quantity;
    } else {
      // N·∫øu ch∆∞a c√≥ th√¨ th√™m m·ªõi
      cart.items.push({ product: productId, quantity });
    }

    await cart.save();
    res.status(200).json(cart);
  } catch (error) {
    console.error("‚ùå L·ªói khi th√™m s·∫£n ph·∫©m:", error);
    res.status(500).json({ message: error.message });
  }
};

  export const updateCartItemQuantity = async (req, res) => {
    const userId = req.user.id;
    const { productId, quantity } = req.body;
  
    try {
      const cart = await Cart.findOne({ user: userId });
  
      if (!cart) return res.status(404).json({ message: "Cart not found" });
  
      const item = cart.items.find(
        (item) => item.product.toString() === productId
      );
  
      if (!item) {
        return res.status(404).json({ message: "Product not found in cart" });
      }
  
      item.quantity = quantity;
  
      await cart.save();
  
      res.status(200).json(cart);
    } catch (error) {
      console.error("L·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng:", error);
      res.status(500).json({ message: "L·ªói server" });
    }
  };
  export const removeSelected = async (req, res) => {
    try {
      const userId = req.user.id; // üëà l·∫•y userId t·ª´ token ƒë√£ decode
const { productIds } = req.body;
      console.log("üì¶ X√≥a s·∫£n ph·∫©m:", { userId, productIds });
      
      if (!userId || !Array.isArray(productIds) || productIds.length === 0) {
        return res.status(400).json({ error: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá." });
      }
  
      const objectIds = productIds.map((id) => new mongoose.Types.ObjectId(id));
  
      const result = await Cart.updateOne(
        { user: userId },
        {
          $pull: {
            items: {
              product: { $in: objectIds },
            },
          },
        }
      );
  
      console.log("üßπ K·∫øt qu·∫£ x√≥a:", result);
  
      return res.status(200).json({ message: "ƒê√£ x√≥a c√°c s·∫£n ph·∫©m ƒë√£ ch·ªçn." });
    } catch (error) {
      console.error("‚ùå L·ªói khi x√≥a nhi·ªÅu s·∫£n ph·∫©m:", error);
      return res.status(500).json({ error: "L·ªói server khi x√≥a s·∫£n ph·∫©m." });
    }
  };
  
  
   