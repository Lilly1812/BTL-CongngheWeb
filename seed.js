import mongoose from "mongoose";
import dotenv from "dotenv";
import { faker } from "@faker-js/faker";
import Product from "./backend/model/product.model.js"; // ƒê·∫£m b·∫£o import ƒë√∫ng model

dotenv.config(); // Load bi·∫øn m√¥i tr∆∞·ªùng t·ª´ .env
console.log("üîπ MONGO_URI:", process.env.MONGO_URI);

// K·∫øt n·ªëi MongoDB
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGO_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true
    });
    console.log("‚úÖ Connected to MongoDB");
  } catch (error) {
    console.error("‚ùå MongoDB Connection Error:", error);
    process.exit(1);
  }
};

// T·∫°o danh s√°ch s·∫£n ph·∫©m gi·∫£
const generateFakeProducts = (num) => {
  return Array.from({ length: num }, () => ({
    name: faker.commerce.productName(),
    description: faker.commerce.productDescription(),
    price: faker.number.int({ min: 100000, max: 500000 }), // Gi√° ng·∫´u nhi√™n t·ª´ 100k - 500k
    image: faker.image.url(), // ·∫¢nh s·∫£n ph·∫©m ng·∫´u nhi√™n
    stock: faker.number.int({ min: 10, max: 100 }), // S·ªë l∆∞·ª£ng t·ªìn kho
    details: {
      material: faker.commerce.productMaterial(),
      weight: `${faker.number.int({ min: 10, max: 50 })}kg`,
      grade: `PCB${faker.number.int({ min: 30, max: 50 })}`,
      fineness: `${faker.number.int({ min: 3000, max: 4000 })} cm¬≤/g`,
      compressive_strength: `${faker.number.int({ min: 30, max: 60 })} MPa`,
      SO3_content: `${faker.number.float({ min: 1.5, max: 3.0, fractionDigits: 1 })}%`,
      manufacturer: faker.company.name()
    }
  }));
};

// Seed d·ªØ li·ªáu
const seedProducts = async () => {
  try {
    await connectDB();
    await Product.deleteMany(); // X√≥a to√†n b·ªô d·ªØ li·ªáu c≈©
    const fakeProducts = generateFakeProducts(100); // T·∫°o 100 s·∫£n ph·∫©m gi·∫£
    const insertedProducts = await Product.insertMany(fakeProducts);
    console.log("‚úÖ ƒê√£ th√™m 100 s·∫£n ph·∫©m gi·∫£ th√†nh c√¥ng!", insertedProducts);
    mongoose.connection.close();
  } catch (error) {
    console.error("‚ùå L·ªói khi th√™m d·ªØ li·ªáu gi·∫£:", error);
    mongoose.connection.close();
  }
};

// Ch·∫°y seed script
seedProducts();
